Треугольник. Разработать классы Точка и Треугольник. Создать методы и тесты:
вычисления площади и периметра треугольника; составляют ли точки треугольник (не
лежат ли точки на одной прямой); является ли треугольник #прямоугольным,
#равнобедренным, #равносторонним, #остро/#тупоугольным.

!!!Условие разрешимости задачи — выполнение неравенства треугольника, то есть каждая длина должна быть меньше, чем сумма двух других длин:

Разработать entity-классы, например: «Разработать классы Точка и Круг»
➢ Entity-классы не следует наполнять методами, выполняющими функциональные
действия (методами бизнес-логики, такими как вычисление, поиск и т.д.).
➢ Разработать action-классы реализующие заданные функциональности, например:
«Реализовать методы вычисления площади и периметра круга»
➢ Параметры, необходимые для создания объектов, организовать как чтение информации из
файла (.txt). Часть данных должны некорректной. Если встретилась некорректная
строка, приложение должно переходить к следующей строке. Все файлы должны
находиться в отдельном каталоге.
➢ Для чтения из файла использовать только методы, появившиеся в Java8.
➢ Разработать validation-классы для проверки результатов вычислений параметров фигур, а
также для валидации исходных данных для создания объектов entity-классов.
Например: корректная строка в файле для создания объекта Круг: «1.0 2.0 3.0», где первое
число задает радиус круга, второе и третье – координаты центра;
некорректная строка в файле для создания объекта Круг: «1.z0 2.0 3.0» - недопустимый
символ «z», всю строку следует считать некорректной здесь и в случаях приведенных ниже;
некорректная строка в файле для создания объекта Круг: «1.0 2.0» - недостаточно
информации для создания объекта;
некорректная строка в файле для создания объекта Круг: «-1.0 2.0 3.0» - невозможно
создать Круг с отрицательным радиусом.
➢ Для классов-сущностей следует переопределять методы класса Object: toString(),
equals(), hashCode(). Методы класса Objects не использовать.
➢ При решении задачи для создания entity-классов можно использовать паттерн Factory
Method.
➢ Все классы приложения должны быть структурированы по пакетам.
➢ Использовать собственные классы исключительных ситуаций.
➢ Оформление кода должно соответствовать Java Code Convention.
➢ Для записи логов использовать Log4J2.
➢ Код должен быть покрыт Unit-тестами. Использовать TestNG. При написании тестов
запрещено: создавать неаннотированные методы, писать логи и использовать операторы
ветвления: if, for, while, do\while, switch; использовать в тест-методе более одного Assert-
метода.
➢ Класс с методом main в задании должен отсутствовать. Запуск только тестами.
➢ Обратить внимание на примечания 1 и 2.